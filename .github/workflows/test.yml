name: Test

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: [self-hosted, Windows]
    strategy:
      matrix:
        go: ['1.21', '1.22']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go }}

    - name: Get dependencies
      run: go mod download

    - name: Check for C compiler
      id: check_compiler
      shell: powershell
      run: |
        try {
          gcc --version
          echo "HAS_COMPILER=true" >> $env:GITHUB_OUTPUT
        } catch {
          echo "HAS_COMPILER=false" >> $env:GITHUB_OUTPUT
        }

    - name: Test with race detector
      if: steps.check_compiler.outputs.HAS_COMPILER == 'true'
      shell: cmd
      env:
        CGO_ENABLED: 1
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Test without race detector
      if: steps.check_compiler.outputs.HAS_COMPILER != 'true'
      shell: cmd
      run: go test -v -coverprofile=coverage.out ./...

    - name: Check coverage
      shell: powershell
      run: |
        # Run coverage and save output
        $coverageOutput = go tool cover -func=coverage.out
        Write-Host $coverageOutput
        
        # Extract coverage percentage
        $lastLine = $coverageOutput | Select-Object -Last 1
        if ($lastLine -match 'total:\s+\(statements\)\s+(\d+\.?\d*)%') {
          $coverage = $matches[1]
          Write-Host "Coverage: $coverage%"
          
          if ([double]$coverage -lt 95) {
            Write-Host "Coverage is below 95%"
            exit 1
          }
        } else {
          Write-Host "Failed to parse coverage output"
          Write-Host "Last line was: $lastLine"
          exit 1
        }

    - name: Build
      run: go build -v ./...